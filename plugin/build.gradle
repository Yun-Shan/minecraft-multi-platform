plugins {
    id 'java'
    alias(libs.plugins.shadow)
    alias(libs.plugins.runPaper)
}

group = rootProject.maven_group
version = project.plugin_version

base {
    archivesName = "$rootProject.archives_name-paper"
}

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
}

dependencies {
    implementation project(":common")

    compileOnly libs.paper.api
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21.4")
    }
    shadowJar {
    }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [
            plugin_name        : rootProject.plugin_name,
            version            : version,
            project_author     : rootProject.project_author.split(',').stream().map { "\"${it}\"" }.toList().join(", "),
            project_description: rootProject.project_description,
    ]
    inputs.properties props
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

artifacts {
    archives shadowJar
}

tasks.build {
    var inputFiles = tasks.shadowJar.outputs
    var outputDir = rootProject.layout.buildDirectory.dir("libs")
    inputs.files(inputFiles)
    outputs.dir(outputDir)
    doLast {
        copy {
            from(inputFiles)
            rename("-all.jar", ".jar")
            into(outputDir)
        }
    }
}
